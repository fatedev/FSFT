/*------------------------------------------------------------------------------
/	Copyright (C) TYPE-MOON All Rights Reserved.
/		タイトルメニュー
/-----------------------------------------------------------------------------*/
Scripts.execStorage("subroutine.tjs");
Scripts.execStorage("MenuPlugin.tjs");
Scripts.execStorage("ExButtonLayer.tjs");
Scripts.execStorage("GalleryMenuLayer.tjs");
Scripts.execStorage("MusicMenuLayer.tjs");
Scripts.execStorage("MovieMenuLayer.tjs");
Scripts.execStorage("ComplexLinearMover.tjs");
Scripts.execStorage("MenuTitleLayer.tjs");
Scripts.execStorage("ExtraMenuButtonLayer.tjs");
Scripts.execStorage("WeaponMenuLayer.tjs");
Scripts.execStorage("MenuManager.tjs");
Scripts.execStorage("EDlistMenuLayer.tjs");
Scripts.execStorage("RotationLayer.tjs");

Plugins.link("filter.dll");

sf.defaultRoute	= "Fate" if sf.defaultRoute == "";
sf.route	= sf.defaultRoute if sf.route == "";
Storages.removeAutoPath(System.exePath+"data/image/title_saber/") if sf.route != "Fate";
Storages.removeAutoPath(System.exePath+"data/image/title_rin/") if sf.route != "UBW";
Storages.removeAutoPath(System.exePath+"data/image/title_sakura/") if sf.route != "HF";

class SimpleTitleMenu extends MenuManager
{
	var title;
	var smudgetime	= 2000;
	var interval	= 96;
	var lasttick;

	function SimpleTitleMenu()
	{
		super.MenuManager(...);
		name	= "シンプルタイトルメニュー";
	}

	function finalize()
	{
		release(title);
		super.finalize();
	}

	function show()
	{
		curlayer.loadImages("simple_title");
		curlayer.setSizeToImageSize();
		with(title = new global.Layer(window, curlayer))
		{
			.loadImages("simple_title_fate");
			.setSizeToImageSize();
			.setPos(500, (curlayer.height - .height) \ 2);
			.hitType	= htMask;
			.hitThreshold	= 256;
			.visible	= true;
		}
		window.setStartAnchorEnabled(false);	//	「最初に戻る」を使用不可に

		super.show(...);
	}

	function hide()
	{
		window.setStartAnchorEnabled(true);	//	「最初に戻る」を使用可に
		super.hide(...);
	}

	function onMouseDown(x, y, button, shift)
	{
		if(button == mbLeft)
		{
			System.addContinuousHandler(smudgeTitle);
			lasttick = starttick = System.getTickCount();
		}
		else if(button == mbRight)
		{
			window.onCloseQuery();	//	ゲーム終了の問い合わせ
		}
	}

	function onKeyDown(key, shift)
	{
		switch(key)
		{
		case VK_SPACE:
		case VK_RETURN:
			onMouseDown(,, mbLeft);
			break;

		case VK_ESCAPE:
//		case VK_DELETE:
//		case VK_BACK:
		case VK_HOME:
			onMouseDown(,, mbRight);
			break;

		default:
			(KAGLayer.onKeyDown incontextof curlayer)(key, shift, true);
			break;
		}
	}

	function smudgeTitle(tick)
	{
		var past = tick - starttick;
		if(past<smudgetime)
		{
			past	= tick - lasttick;
			if(past>interval)
			{
				Blur(%[layer:title,level:1]);
				lasttick	= tick ;
			}
		}
		else
		{
			System.removeContinuousHandler(smudgeTitle);
			hide();
		}
	}
}

class NormalTitleMenu extends MenuManager
{
	var squashtime	= 150;
	var waittime	= squashtime - 0;

	var clearFlags	= [
		"gセイバークリア",
		"g凛トゥルー",
		"g凛グッド",
		"g桜トゥルー",
		"g桜ノーマル"
	];
	var	routeClearFlags	= %[
		Fate:[ clearFlags[0] ],
		UBW:[ clearFlags[1], clearFlags[2] ],
		HF:[ clearFlags[3], clearFlags[4] ]
	];
	var	realtaFlag	= "gレアルタ";
	var	_clear_state;
	property clear_state
	{
		getter
		{
			if(_clear_state === void)
			{
				_clear_state	= 0;	//	全くクリアしていない(ノーマル)

				//	クリアーフラグをチェック
				var allcleared	= true;	//	全クリア
				for(var i=0; i<clearFlags.count; i++)
				{
					if(!sf[clearFlags[i]])
						allcleared	= false;
				}
				var	cleared	= true;	//	各ルートの全EDをクリア
				var	rcf		= routeClearFlags[sf.route];
				for(var i=0; i<rcf.count; i++)
				{
					if(!sf[rcf[i]])
						cleared	= false;
				}
				if(cleared)
					_clear_state	= 1;	//	各ルートクリア
				if(allcleared)
				{
					_clear_state	= 2;	//	荒野(レアルタ未クリア)
					if(sf[realtaFlag])
						_clear_state	= 3;	//	草原(レアルタクリア)
				}
				if(!sf.sawPrologue)
					_clear_state	= 4;	//	未定(プロローグ前)
			}
			return _clear_state;
		}
	}

	var	titlebuttondatas_normal	= [
		//	名称	画像名		座標		Tips								エフェクト
		[ "load",	"ta_load",	138,484,	"セーブした場面から再開します。",	"tsa_load" ],
		[ "start",	"ta_start",	284,484,	"最初から始めます。",				"tsa_start" ],
		[ "config",	"ta_config",434,484,	"プレイの設定を変更します。",		"tsa_config" ],
		[ "extra",	"ta_extra",	600,484,	"特別メニューへ切り替えます。",		"tsa_extra" ]
//		,[ "exit",	"ta_exit",	365,522,	"終了します。",						"tsa_exit" ]
	];
	var	titlebuttondatas_routeclear	= [
		//	名称	画像名		座標		Tips								エフェクト
		[ "load",	"tb_load",	138,484,	"セーブした場面から再開します。",	"tsb_load" ],
		[ "start",	"tb_start",	284,484,	"最初から始めます。",				"tsb_start" ],
		[ "config",	"tb_config",434,484,	"プレイの設定を変更します。",		"tsb_config" ],
		[ "extra",	"tb_extra",	600,484,	"特別メニューへ切り替えます。",		"tsb_extra" ]
	];
	var	titlebuttondatas_norealta	= [
		//	名称	画像名		座標		Tips								エフェクト		y移動	移動遅
		[ "load",	"tb_load",	138,484,	"セーブした場面から再開します。",	"tsb_load",		-25,	1200 ],
		[ "start",	"tb_start",	284,484,	"最初から始めます。",				"tsb_start",	-25,	1200 ],
		[ "config",	"tb_config",434,484,	"プレイの設定を変更します。",		"tsb_config",	-25,	1200 ],
		[ "extra",	"tb_extra",	600,484,	"特別メニューへ切り替えます。",		"tsb_extra",	-25,	1200 ],
		[ "realta",	"tb_lastep",313,513,	"Last Episode",						"tsb_last",	 	,		2000 ]
	];
	var	titlebuttondatas_realta	= [
		//	名称	画像名		座標		Tips								エフェクト
		[ "load",	"tc_load",	138,459,	"セーブした場面から再開します。",	"tsc_load" ],
		[ "start",	"tc_start",	284,459,	"最初から始めます。",				"tsc_start" ],
		[ "config",	"tc_config",434,459,	"プレイの設定を変更します。",		"tsc_config" ],
		[ "extra",	"tc_extra",	600,459,	"特別メニューへ切り替えます。",		"tsc_extra" ],
		[ "realta",	"tc_lastep",313,513,	"Last Episode",						"tsc_last" ]
	];
	var	titlebuttondatas_first	= [
/*	プロローグを見ていなければ、タイトルは表示されない
		//	名称		画像名		座標		Tips								エフェクト
		[ "load",		"ta_load",	194,484,	"セーブした場面から再開します。",	"ts_load" ],
		[ "prologue",	"ta_start",	360,484,	"最初から始めます。",				"ts_start" ],
		[ "config",		"ta_config",524,484,	"プレイの設定を変更します。",		"ts_config" ]
//		,[ "exit",		"t_exit",	365,522,	"終了します。",						"ts_exit" ]
*/
	];
	var titlebuttondatas= [
		titlebuttondatas_normal,	//	ノーマルタイトル
		titlebuttondatas_routeclear,//	ルートクリアタイトル
		titlebuttondatas_norealta,	//	レアルタ未クリアタイトル
		titlebuttondatas_realta,	//	レアルタクリアタイトル
		titlebuttondatas_first		//	プロローグタイトル
	];

	var extrabuttondatas= [
		[ void,			"ex_title",		48,	268, 1, 261 ],
		[ "prologue",	"ex_prologue",	651,61,	"プロローグをもう一度見れます。", 2, 89 ],
		[ "gallery",	"ex_gallery",	659,114,"イベントグラフィックが閲覧できます。", 2, 142 ],
		[ "soundtest",	"ex_music",		666,168,"音楽、効果音を聞けます。", 2, 195 ],
		[ "movie",		"ex_movie",		665,221,"ムービーを閲覧できます。", 2, 248 ],
		[ "edlist",		"ex_edlist",	660,274,"クリアしたエンディング等を閲覧できます。", 2, 301 ],
		[ "status",		"ex_status",	666,328,"サーヴァントのステータスを閲覧できます。", 2, 354 ],
		[ "weapon",		"ex_weapon",	653,381,"武器辞典を閲覧できます。", 2, 407 ],
		[ "back",		"ex_back",		695,550,"タイトルメニューへ戻ります。", 3, 578 ]
	];

	var titleitem_visiblestart	= 0;
	var titlebutton_visiblestart= 1000;
	var	titleitemdatas_normal	= [
		//	画像			座標		時間	遅延	Extraから戻った時表示されるか
		[ "ta_魔法陣",		120,  10,	600,	0,		1 ],
		[ "ta_logo1",		178,  53,	600,	200,	0 ],
		[ "ta_logo2",		143,  93,	600,	400,	0 ],
		[ "ta_logo3",		274, 275,	600,	600,	0 ],
		[ "ta_logo4",		200, 308,	600,	700,	0 ],
		[ "ta_logo5",		 37, 158,	600,	1200,	0 ],
		[ "ta_logo6",		 37,  45,	800,	1400,	1 ],
		[ "t_since",		255, 569,	600,	1400,	1 ]
	];
	var	titleitemdatas_routeclear	= [
		//	画像			座標		時間	遅延	Extraから戻った時表示されるか
//		[ "ta_魔法陣",		120,  10,	600,	0,		1 ],
		[ "ta_logo1",		178,  53,	600,	200,	0 ],
		[ "ta_logo2",		143,  93,	600,	400,	0 ],
		[ "ta_logo3",		274, 275,	600,	600,	0 ],
		[ "tb_logo4",		200, 308,	600,	700,	0 ],
		[ "ta_logo5",		 37, 158,	600,	1200,	0 ],
		[ "tb_logo6",		 37,  45,	800,	1400,	1 ],
		[ "t_since",		255, 569,	600,	1400,	1 ]
	];
	var	titleitemdatas_realta	= [
		//	画像			座標		時間	遅延	Extraから戻った時表示されるか
//		[ "ta_魔法陣",		120,  10,	600,	0,		1 ],
		[ "ta_logo1",		178,  53,	600,	200,	0 ],
		[ "ta_logo2",		143,  93,	600,	400,	0 ],
		[ "ta_logo3",		274, 275,	600,	600,	0 ],
		[ "tc_logo4",		200, 308,	600,	700,	0 ],
		[ "ta_logo5",		 37, 158,	600,	1200,	0 ],
		[ "tc_logo6",		 32,  45,	800,	1400,	1 ],
		[ "t_since",		255, 569,	600,	1400,	1 ]
	];
	var	titleitemdatas_first	= [
/*	プロローグを見ていなければ、タイトルは表示されない
		//	画像			座標		時間	遅延	Extraから戻った時表示されるか
		[ "t_magiccircle0",	123,  10,	600,	0,		1 ],
		[ "t_crestb0",		181,   6,	600,	200,	0 ],
		[ "t_cresta0",		191,  21,	600,	400,	0 ],
		[ "t_fate_en0",		281,  42,	600,	500,	0 ],
		[ "t_realta0",		307, 303,	600,	600,	0 ],
		[ "t_fate_jp0",		280, 355,	600,	700,	0 ],
		[ "t_english0",		224, 386,	600,	800,	1 ],
		[ "t_corporation0",	132, 572,	600,	1200,	1 ]
*/
	];
	var titleitemdatas	= [
		titleitemdatas_normal,		//	ノーマルタイトル
		titleitemdatas_routeclear, 	//	ルートクリアタイトル
		titleitemdatas_routeclear,	//	レアルタ未クリアタイトル
		titleitemdatas_realta,		//	レアルタクリアタイトル
		titleitemdatas_first		//	プロローグタイトル
	];

	var titlestorage;
	var	title_setting	= [
		[ "ta_back",		"bgm01.ogg" ],	//	ノーマルタイトル
		[ "tb_back",		"bgm45.ogg" ],	//	ルートクリアタイトル
		[ "tb_back",		"" ],			//	レアルタ未クリアタイトル
		[ "tc_back",		"bgm45.ogg" ],	//	レアルタクリアタイトル
		[ "first_title",	"bgm01.ogg" ]	//	プロローグタイトル
	];

	var lastitemchangedelay	= 1400 + titleitem_visiblestart;

	var state;

	var timer;
	var timer2;

	var titlebuttons	= [];
	var extrabuttons	= [];
	var titleitems;

	var nextpage;//	= "FlowTrackerPlugin.ks";
	var nextlabel;//	= "*start";

	var firstmode	= "title";
	var firsttime;		//	最初の実行か？

	var lastmenu;

	var showed;

	function NormalTitleMenu()
	{
		super.MenuManager(...);
		name	= "ノーマルタイトルメニュー";
		firsttime	= true;

		//	座標が異なるので
		switch(sf.route)
		{
		case "Fate":
			break;
		case "UBW":
			//	logo3(x)
			titleitemdatas_normal[3][2] = titleitemdatas_routeclear[2][2] = titleitemdatas_realta[2][2] = 261;
			//	logo4(x,y)
			titleitemdatas_normal[4][1] = titleitemdatas_routeclear[3][1] = titleitemdatas_realta[3][1] = 199;
			titleitemdatas_normal[4][2] = titleitemdatas_routeclear[3][2] = titleitemdatas_realta[3][2] = 294;
			//	logo5(x,y)
			titleitemdatas_normal[5][1] = titleitemdatas_routeclear[4][1] = titleitemdatas_realta[4][1] = 0;
			titleitemdatas_normal[5][2] = titleitemdatas_routeclear[4][2] = titleitemdatas_realta[4][2] = 179;
			//	logo6(x)
			titleitemdatas_normal[6][1] = titleitemdatas_routeclear[5][1] = titleitemdatas_realta[5][1] = 0;
			break;
		case "HF":
			//	logo3(x)
			titleitemdatas_normal[3][2] = titleitemdatas_routeclear[2][2] = titleitemdatas_realta[2][2] = 268;
			//	logo4(x,y)
			titleitemdatas_normal[4][1] = titleitemdatas_routeclear[3][1] = titleitemdatas_realta[3][1] = 199;
			titleitemdatas_normal[4][2] = titleitemdatas_routeclear[3][2] = titleitemdatas_realta[3][2] = 301;
			//	logo5(x,y)
			titleitemdatas_normal[5][1] = titleitemdatas_routeclear[4][1] = titleitemdatas_realta[4][1] = 71;
			titleitemdatas_normal[5][2] = titleitemdatas_routeclear[4][2] = titleitemdatas_realta[4][2] = 179;
			//	logo6(x)
			titleitemdatas_normal[6][1] = titleitemdatas_routeclear[5][1] = titleitemdatas_realta[5][1] = 65;
			break;
		}
	}

	function finalize()
	{
		if(titleitems!=void)
			for(var i=0; i<titleitems.count; i++)	release(titleitems[i]);
		release(timer);
		eraseButtons(titlebuttons);
		eraseButtons(extrabuttons);
		super.finalize(...);
	}

	function initTitle(layer)
	{
//		if(firsttime && firstmode=="title")
		{
			//	クリア状態に合わせて、タイトル画面を変更
			titlestorage			= title_setting[clear_state][0];
			BGMList["normaltitle"]	= title_setting[clear_state][1];

			//	初回のみ順番に表示する
			layer.loadImages(titlestorage);

			//	各種タイトルオブジェクトを表示
			var tid = titleitemdatas[clear_state];
			var ti = titleitems = [];
			var	fst= firsttime && firstmode == "title";
			for(var i=0; i<tid.count; i++)
			{
				if(tid[i]==void)	continue;
				var td = tid[i];
				if(!fst && !td[5])	continue;	//	Extraから戻ってきたときは表示しない
				with(ti[i] = new global.FadeLayer(window, layer))
				{
					.loadImages(td[0]);
					.setSizeToImageSize();
					if(fst)
					{
						.setPos(td[1], td[2]);
						.fade(255, td[3],,, td[4] + titleitem_visiblestart);
						.hitType	= htMask;
						.hitThreshold	= 256;
					}
					else
					{
						layer.operateRect(td[1], td[2], ti[i], 0, 0, .width, .height);
						invalidate ti[i];
						ti[i]	= void;
					}
				}
			}
/*			timer2	= new Timer(changeTitleImage, "");
			timer2.interval	= lastitemchangedelay + titleitem_visiblestart;
			timer2.enabled	= true;
*/		}
/*		else
			layer.loadImages(titlestorage+"2");
*/		layer.setSizeToImageSize();

		initTitleButtons(layer);
		state	= "title";
		firsttime	= false;
		titlebutton_visiblestart	= 0;	//	すぐにボタンを表示させる

		var tb = titlebuttons;
		for(var i=0; i<tb.count; i++)
		{
			if(tb[i].id == "load")
			{
				with(tb[i])
					moveCursor(tb[i], .width>>1, .height>>1);
				break;
			}
		}

		//	音楽開始
		var	bgmfn	= BGMList["normaltitle"];
		if(bgmfn != void)
			playBGM(bgmfn, 400, 400);
		else
			stopBGM();
	}

/*	function changeTitleImage()
	{
		release(timer2);	timer2	= void;
		curlayer.loadImages(titlestorage+"2");
		eraseTitleItems();
	}
*/
	function eraseTitleItems()
	{
		if(titleitems!==void)
		{
			for(var i=0; i<titleitems.count; i++)
				release(titleitems[i]);
			titleitems	= void;
		}
	}

	function initTitleButtons(layer)
	{
		var bds = titlebuttondatas[clear_state];	//	クリア状態に合わせて、出現ボタンも変化
		var	showtime	= 600;	//	出現時間(opacity = 0->255)
		var	movetime	= 800;	//	移動時間
		var	moveaccel	= 0;
		var	delay	= titlebutton_visiblestart;
		var	delayinterval	= 200;
		var	bd, btn;
		if(bds != titlebuttondatas_norealta)
		{
			//	順番に表示されるボタン
			for(var i=0; i<bds.count; i++)
			{
				if((bd = bds[i]) != void)
				{
					with(btn = new TitleMenuButtonLayer(window, layer, bd[0], bd[2], bd[3], bd[1], bd[4]))
					{
						.smudgefile		= bd[5];
						.mode			= 3;
						.hitThreshold	= 0;
						.squashtime		= squashtime;
						.show(showtime,,,, delay);
						.fadeonly		= true if bds == titlebuttondatas_realta;	//	押した後は普通にフェードするように
					}
					titlebuttons.add(btn);
					delay	+= delayinterval;
				}
			}
		}
		else
		{
			//	4つボタンが表示されたあとに上にずれて、realtaボタンが遅れて出現する
			//	順番に表示されるボタン
			for(var i=0; i<bds.count; i++)
			{
				if((bd = bds[i]) != void)
				{
					with(btn = new TitleMenuButtonLayer(window, layer, bd[0], bd[2], bd[3], bd[1], bd[4]))
					{
						.smudgefile		= bd[5];
						.mode			= 3;
						.hitThreshold	= 0;
						.squashtime		= squashtime;
						if(bd[6] !== void)
						{
							.show2(showtime, delay, bd[6], movetime, moveaccel, bd[7]+titlebutton_visiblestart);	//	出現時間、出現待ち時間、移動待ち時間、y移動量, 移動時間
						}
						else
							.show(showtime,,,, bd[7]+titlebutton_visiblestart);	//	出現時間、、、、出現待ち時間
						.fadeonly	= true;	//	押した後は普通にフェードするように
					}
					titlebuttons.add(btn);
					delay	+= delayinterval;
				}
			}
		}
	}

	function initExtra(layer)
	{
		layer.loadImages("normal_extra");
		layer.setSizeToImageSize();
		initExtraButtons(layer);
		state	= "extra";

		var exb	= extrabuttons;
		for(var i=0; i<exb.count; i++)
		{
			with(exb[i])
				if(typeof .id != "undefined" && .id == "gallery")
				{
					moveCursor(exb[i], .width>>1, .height>>1);
					break;
				}
		}

		//	音楽開始
		playBGM(BGMList["extratitle"], 400, 400);
		sf.playedMusic[BGMList["extratitle"]]++;
	}

	function initExtraButtons(layer)
	{
		//	閲覧フラグのチェック
		var statusskip	= !sf.servant["セイバー"].cansee;
		var weaponskip	= true;
		for(var i=0; i<Weapons.count; i++)
		{
			if(sf.weapon[Weapons[i]])
			{
				weaponskip	= false;
				break;
			}
		}

		var bds = extrabuttondatas;
		var delaytime= 200, delay = 60;
		for(var i=0; i<bds.count; i++)
		{
			var btn	= void;
			var bd	= bds[i];
			if(bd[0]!=void)
			{
				//	表示しなくてもイイ！
				if(bd[0] == "status" && statusskip)	continue;
				if(bd[0] == "weapon" && weaponskip)	continue;

				btn = new ExtraMenuButtonLayer(window, layer, bd[0], bd[2], bd[3], bd[1], bd[4],,bd[5], bd[6]);
				btn.slidetime	= 300;
				btn.mode		= 3;
				btn.hitThreshold= 0;
				delaytime	+= delay;
			}
			else
			{
				btn = new MenuTitleLayer(window, layer, bd[1], bd[2], bd[3], bd[4],bd[5]);
				btn.slidetime	= 800;
			}
			if(btn!=void)
			{
				extrabuttons.add(btn);
				btn.open(delaytime);
			}
		}
	}

	function focusButtons(buttons, id="gallery")
	{
		for(var i=0; i<buttons.count; i++)
		{
			if(typeof buttons[i].id != "undefined" && buttons[i].id==id)
			{
				buttons[i].focus();
				break;
			}
		}
	}

	function show()
	{
		if(!showed)
		{
			showed	= true;
			//	開く
			if(firstmode == "title")
				initTitle(curlayer);
			else
				initExtra(curlayer);
			super.show(0);

			//	タイトルを開いた時に基本レイヤーの前後位置が乱れているので、並べ直す
			window.reorderLayers();

			window.setStartAnchorEnabled(false);	//	「最初に戻る」を使用不可に

			if(state == "title")
				focusButtons(titlebuttons, "load");
			else
				focusButtons(extrabuttons, "gallery");
		}
	}

	function change(btn=void)
	{
		if(showed)
		{
			//	次のメニューを準備し、表示中のボタンに対して「閉じろ」命令を出す
			switch(state)
			{
			case "title":
				initExtra(nextlayer);
				closeButtons(titlebuttons, btn, 0, squashtime);
				break;
			case "extra":
				initTitle(nextlayer);
				closeButtons(extrabuttons, btn, 0, squashtime);
				playtime_object.close() if playtime_object.doing;
				break;
			}

			//	ボタンが「閉じて」いる間、処理を待つ
			timer	= new Timer(delay_change, "") if timer==void;
			timer.interval	= waittime;
			timer.enabled	= true;
		}
	}

	function hide(btn)
	{
		if(showed)
		{
			showed	= false;

			//	音楽停止(タイトルの音楽である時のみ)
			var curbgm = window.bgm.currentStorage;
			stopBGM() if (curbgm == BGMList["normaltitle"] || curbgm == BGMList["extratitle"]);

			//	隠れる
			switch(state)
			{
			case "title":	closeButtons(titlebuttons, btn, 0, squashtime);	break;
			case "extra":
				closeButtons(extrabuttons, btn, 0, squashtime);
				playtime_object.close() if playtime_object.doing;
				break;
			}

			//	ボタンが「閉じて」いる間、処理を待つ
			timer	= new Timer(delay_hide, "") if timer==void;
			timer.interval	= waittime;
			timer.enabled	= true;
		}
	}

	function delay_change()
	{
		//	チョイ遅れて切替開始
		timer.enabled	= false;
		invalidate timer;	timer	= void;
		super.change();	//	BGを含め、切替を開始する

		//	実行時間表示を開く
		if(state=="extra")
			playtime_object.open(curlayer);	//	extraが開く時: 表示
	}

	function delay_hide()
	{
		//	チョイ遅れて隠れ開始
		timer.enabled	= false;
		invalidate timer;	timer	= void;
		window.setStartAnchorEnabled(true);	//	「最初に戻る」を使用可に
		super.hide();
	}

	function delay_appear()
	{
		//	チョイ遅れて内部メニュー表示開始
		timer.enabled	= false;
		invalidate timer;	timer	= void;
		for(var i=0; i<innermenus.count; i++)
			innermenus[i].show(300, 0) if innermenus[i].opacity!=255;

//		curlayer.focusable	= false;	//	フォーカスを受け付けなくする
	}

	//	子から閉じてくれと要請
	//		child	: その子
	//		withthis: 親もろともか？(タイトルでは受け付けない)
	function closeChild(child, withthis=false)
	{
		dm("hide: "+child.name);
		child.hide();

		//	直前のボタンへ移動
		var btns = [ titlebuttons, extrabuttons ];
		for(var i=0; i<btns.count; i++)
		{
			for(var j=0; j<btns[i].count; j++)
			{
				var btn = btns[i][j];
				if(typeof btn.id != "undefined" && btn.id == sf.lastmenu)
				{
					moveCursor(btn, btn.width>>1, btn.height>>1);
					sf.lastmenu	= void;
					return;
				}
			}
		}
	}

	//	指定のスクリプトを再生する
	function goLabel(storage, label, btn=void)
	{
		nextpage	= storage;
		nextlabel	= label;
		hide(btn);
	}

	function onMouseDown(x, y, button, shift)
	{
		if(button == mbRight)
		{
			if(innermenus.count>0)
			{
				//	拡張メニューを表示しているなら閉じる
				for(var i=0; i<innermenus.count; i++)
					closeChild(innermenus[i]);
			}
			else if(state=="extra")
				change();				//	エクストラメニューならタイトルメニューへ
			else
				window.onCloseQuery();	//	タイトルメニューなら終了か聞く
		}
	}

	function onKeyDown(key, shift)
	{
/*		dm("key: "+key+"("+(key-VK_F1)+")");
		if(key>=VK_F1 && key<=VK_F12)
		{
			if(state=="title")
				window.loadBookMarkWithAsk(kag.numBookMarks - 1 - (key - VK_F1), hide);
		}*/
		switch(key)
		{
		case VK_ESCAPE:
		case VK_DELETE:
		case VK_BACK:
		case VK_HOME:
			onMouseDown(,, mbRight);
			break;

		default:
			(KAGLayer.onKeyDown incontextof curlayer)(key, shift, true);
			break;
		}
	}

	function onJoyStick(trig)
	{
		if(trig & jsLeft)		onKeyDown(VK_LEFT);
		else if(trig & jsRight)	onKeyDown(VK_RIGHT);
		if(trig & jsUp)			onKeyDown(VK_UP);
		else if(trig & jsDown)	onKeyDown(VK_DOWN);
		if(trig & jsTrigger1)	onKeyDown(VK_RETURN);
		if(trig & jsTrigger2)	onKeyDown(VK_ESCAPE);
	}

	function onButtonDown(btn)
	{
		//	ボタンが押された
		var	menu;
		dm("on button down: "+btn.id+" / focusable = "+btn.focusable);
		switch(btn.id)
		{
		//	対応するメニューを開く
		case "load":		menu	= new SaveLoadMenuLayer(window, curlayer, "load");	break;
		case "config":		menu	= new ConfigMenuLayer(window, curlayer);			break;
		case "gallery":		menu	= new GalleryMenuLayer(window, curlayer);			break;
		case "soundtest":	menu	= new MusicMenuLayer(window, curlayer);				break;
		case "movie":		menu	= new MovieMenuLayer(window, curlayer);				break;
		case "edlist":		menu	= new EDListMenuLayer(window, curlayer);			break;
		case "status":		menu	= new StatusMenuLayer(window, curlayer, "global");	break;
		case "weapon":		menu	= new WeaponMenuLayer(window, curlayer, "global");	break;

		//	最初から開始する
		case "start":
			goLabel("FlowTrackerPlugin.ks", "*start", btn);
			return;

		//	プロローグから開始する
		case "prologue":
			goLabel("プロローグ.ks", "*start", btn);
			return;

		//	もう一方へ切り替える
		case "extra":
		case "back":
			change(btn);
			return;

		//	閉じる
		case "exit":
			window.onCloseQuery();
			return;

		//	ラストエピソードを開始する
		case "realta":
			goLabel("タイトル.ks", "*realtanua", btn);
			return;
		}

		//	メニューを開くことにしたとき
		closeButtons(state=="title" ? titlebuttons : extrabuttons, btn, 0, squashtime);
		sf.lastmenu	= btn.id;

		innermenus.add(menu);	//	追加
		timer	= new Timer(delay_appear, "") if timer==void;	//	内部メニューの表示はちょっと遅らせる
		timer.interval	= waittime;
		timer.enabled	= true;
	}

	//	内部メニューが閉じられようとしている時
	function onBeforeClose(menu)
	{
		super.onBeforeClose(...);	//	メニューを一覧から削除

		if(state=="title")
		{
			initTitleButtons(curlayer);	//	タイトルボタンを表示
			focusButtons(titlebuttons, "load");
		}
		else
		{
			initExtraButtons(curlayer);	//	エクストラボタンを表示
			focusButtons(extrabuttons, sf.lastmenu);
		}

//		curlayer.focusable	= true;	//	フォーカス受け付けを再開する
	}

	function onTransitionCompleted(src, dest)
	{
		super.onTransitionCompleted(...);
		eraseTitleItems();
		if(state=="title")
			focusButtons(titlebuttons, "load");
		else
			focusButtons(extrabuttons, "gallery");
	}
}

class TitleMenuButtonLayer extends ExButtonLayer
{
	var smudgefile;
	var squashimage;

	var squashtime	= 200;
	var squashaccel	= 0;//-3;
	var starttick;
	var doingSquash;

	var baseleft, basetop;
	var basewidth, baseheight;
	var destwidth, destheight;

	var fadeonly;

	var	mtimer, my, mtime, maccel;

	function TitleMenuButtonLayer()
	{
		super.ExButtonLayer(...);
	}

	function finalize()
	{
		release(squashimage);
		release(mtimer);
		super.finalize(...);
	}

	function close(delaytime)
	{
//		dm("delaytime = "+delaytime);
		if(!fadeonly)
		{
			if(delaytime<1)
			{
				with(squashimage = new global.Layer(window, parent))
				{
					if(smudgefile==void)
					{
						.setSize(width, height);
						.copyRect(0, 0, this, -imageLeft, -imageTop, width, height);
					}
					else
					{
						.loadImages(smudgefile);
						.setSizeToImageSize();
						setPos(left + int((width - .width)/2+0.5), top + int((height - .height)/2+0.5));
						setSize(.width, .height);
					}
					imageLeft	= 0;
					imageTop	= 0;
					focusable	= false;
					copyRect(0, 0, squashimage, 0, 0, .width, .height);

					baseleft	= left;
					basetop		= top;
					basewidth	= .width;
					baseheight	= .height;
					destwidth	= basewidth * 3;
					destheight	= 1;
				}
			}
			else
				fadeonly	= true;
		}

		stopSquash();

		starttick	= System.getTickCount() + delaytime;
		System.addContinuousHandler(squash);
		doingSquash	= true;
	}

	function squash(tick)
	{
		var past = tick - starttick;
		if(past>0)
		{
			if(past<=squashtime)
			{
				var per = calcAccel(past / squashtime, squashaccel);
				if(!fadeonly)
				{
					setSize(basewidth + int((destwidth - basewidth) * per + 0.5),
							baseheight + int((destheight - baseheight) * per + 0.5));
					setPos(baseleft-int((width-basewidth)/2+0.5), basetop-int((height-baseheight)/2+0.5));
					stretchCopy(0, 0, width, height,
							squashimage, 0, 0, basewidth, baseheight, stLinear);
				}
				opacity	= 255 - int(192 * per + 0.5);
			}
			else
				finishSquash();
		}
	}

	function finishSquash()
	{
		squash(starttick + squashtime);
		stopSquash();
	}

	function stopSquash()
	{
		if(doingSquash)
		{
			System.removeContinuousHandler(squash);
			doingSquash	= false;
			invalidate this;
		}
	}

	function onKeyDown(key, shift)
	{
		if(key>=VK_F1 && key<=VK_F12)
			parent.onKeyDown(...);
		else
			super.onKeyDown(key, shift, true);
	}

	//	delay 後に time で出現。mdelay 後に mtime で my だけy座標を移動する
	function show2(time, delay, my, mtime, maccel, mdelay)
	{
		show(time,,,, delay);	//	出現処理

		//	移動の予約
		with(mtimer = new Timer(onStartMove, ""))
			.capacity	= 1, .interval	= mdelay, .enabled	= true;
		this.my		= my;
		this.mtime	= mtime;
		this.maccel	= maccel;
	}

	var	startytick, starty;
	function onStartMove()
	{
		invalidate mtimer;
		with(mtimer = new Timer(move_handler, ""))
			.interval	= 16, .capacity	= 1, .enabled	= true;
		startytick	= System.getTickCount();
		starty		= top;
	}

	function move_handler()
	{
		var	past	= System.getTickCount() - startytick;
		if(past > mtime)
		{
			top	= starty + my;
			invalidate mtimer;
			mtimer	= void;
		}
		else
			top	= starty + int(calcAccel(past / mtime, maccel) * my);
	}
}
/*
var magiccircleimage;
class RotateMagicCircle extends FadeLayer
{
	var affine;

	var time2rad;

	var last_tick;	//	スーパークラスのlasttickとかち合うので変更
	var lastrad;

	var play;

	function RotateMagicCircle(win, par, l=20, t=300, w=300, h=300, r=(Math.PI/500)/2)
	{
		super.FadeLayer(...);
		setSize(w, h);
		setPos(l, t);
		fillRect(0, 0, w, h, 0x00000000);
		time2rad	= r;

		if(magiccircleimage==void)
		{
			with(magiccircleimage = new global.Layer(win, par))
			{
				.name	= "魔法陣";
				.loadImages("Lmagiccircle");
				.setSizeToImageSize();
			}
		}

		affine = new easyAffineTransform();
	}

	function finalize()
	{
		System.removeContinuousHandler(draw) if play;
		release(magiccircleimage);	magiccircleimage	= void;
		super.finalize(...);
	}

	function open()
	{
		super.show(300, 0);
		lastrad		= 0;
		last_tick	= System.getTickCount();
		System.addContinuousHandler(draw);
		play	= true;
	}

	function close()
	{
		super.hide(300, 0, onClosed);
	}

	function pause(sw)
	{
		if(sw!==void)
		{
			if(sw!=play)
				play	= sw;
			else
				return;
		}
		else
			play	= !play;

		if(play)
			System.addContinuousHandler(draw);
		else
			System.removeContinuousHandler(draw);
	}

	function draw(tick)
	{
		var past= tick - last_tick;
		if(past<1)	return;
		var rad	= past * time2rad + lastrad;

		var mc = magiccircleimage;
		with(affine)
		{
			.clear();	//	行列を消去
			.addTransferMatrix(-mc.width/2, -mc.height/2);	//	中心へ移動
			.addRotateMatrix(rad);							//	回転
			.addMagnifyMatrix(width/mc.width, height/mc.height*0.5);	//	縮小
//			.addRotateMatrix(Math.PI/8);					//	ちょっと斜めにする
			.addTransferMatrix(width/2, height/2);	//	元の位置へ
			.transformByProgram(this, mc, 0, 0, mc.width, mc.height);
		}

		last_tick	= tick;
		lastrad		= rad;
		if(rad>Math.PI*2)
			rad	-= Math.PI*2;
		else if(rad<0)
			rad	+= Math.PI*2;
	}

	function onClosed()
	{
		invalidate this;
	}
}
*/
//	タイトルメニュープラグイン
class TitleMenuPlugin extends MenuPlugin
{
	var currentState;	//	タイトルの状態/ゲームの進行状況によって変化

	var prologuepage	= "プロローグ.ks";
	var prologuelabel	= "*start";

	var firstmode;

	function TitleMenuPlugin(window)
	{
		super.MenuPlugin(window);
		triggername		= "";
	}

	function createMenuLayer(window, parent, plugin)
	{
		//	タイトルメニューレイヤーが本体
/*		//	シンプルタイトルは無くなった
		if(!sf.sawPrologue)
		{
			return new SimpleTitleMenu(window, parent, plugin);
		}
		else*/
		{
			var m = new NormalTitleMenu(window, parent, plugin);
			m.firstmode	= firstmode;
			return m;
		}
	}

	function setFirstMode(mode)
	{
		firstmode	= mode;
	}

	function onMenuClosed()
	{
		dm("menu closed.");
		if(!sf.sawPrologue)
		{
			//	プロローグをすべてみていない時は、プロローグを開始する
			window.process(prologuepage, prologuelabel);
		}
		else
		{
			if(menulayer.nextpage!=void)
				window.process(menulayer.nextpage, menulayer.nextlabel);
		}
		super.onMenuClosed();
	}

/*
	function onReturnFromInterlude()
	{
		//	インタリュードから戻ってきたとき
		if((menulayer = createMenuLayer(window, window.fore.base, this))!=void)
		{
			var dt = menulayer.defaulttime;
			menulayer.defaulttime	= 0;
			menulayer.changeState(currentState);	//	初期メニューから
			menulayer.changeState("extraMenu");		//	エクステンドメニューになって
			menulayer.changeState("interludeMenu");	//	インタリュードに戻る
			menulayer.defaulttime	= dt;
			menulayer.show();
			state	= 0;
			gamemenu.changeMenuMode(1);	//	ゲーム中のメニュー
		}
	}
*/
	function onRestore()
	{
		setSystemMode("scenario");
		super.onRestore(...);
	}
}

kag.addPlugin(global.titlemenu_object = new TitleMenuPlugin(kag));

